#!/usr/bin/bash

set -e

function show_help() {
    echo -e "SRC to MAKE : Help\n"
    echo "This script helps you formatting your makefile's source rule."
    echo "It uses a SRC rule, and the one next to it, you can provide these rules."
    echo "There should be an empty line between src and the following rule."
    echo "Here are the arguments you can pass to modify the behaviour:"
    echo -e "\t-h\t\tPrint this help"
    echo -e "\t-p <path>\tSource files path relative to Makefile path. Each call adds to the parse list (Default : src/)"
    echo -e "\t-t <size>\tTab size (Default : 8)"
    echo -e "\t-s <rule>\tRule to use instead of src (Default : SRC)"
    echo -e "\t-o <rule>\tRule next to src (Default : OBJ)"
    echo -e "\t-m <path>\tWhere to find the makefile and source files (Default : ./)"
    echo -e "\t-e <extension>\tFile extension to find (Default: c)"
    echo -e "\t-l\t\tLet main in src"
}

parse_path="src";
parse_change="";
tab_size=8;
src_rule="SRC";
obj_rule="OBJ";
file_ext="c";
leave_main=false

while getopts "h?t:p:s:o:e:l" opt; do
    case "$opt" in
        h|\?)
            show_help
            exit 0
        ;;
        t)  tab_size=$OPTARG
        ;;
        l)  leave_main=true
        ;;
        p)  parse_change+=" $OPTARG "
        ;;
        s)  src_rule=$OPTARG
        ;;
        o)  obj_rule=$OPTARG
        ;;
        e)  file_ext=$OPTARG
        ;;
        m)  cd $OPTARG
        ;;
    esac
done

if [ ! "$parse_change" == "" ]
then
    parse_path=$parse_change
fi

if [ ! -f "Makefile" ]
then
    echo "Makefile not found. Exec in a dir with a makefile.";
    exit 84;
fi

for i in $parse_path
do
    if [ ! -d $i ]
    then
        echo "${i} not found."
        exit 84;
    fi
done

src=""
for i in $parse_path
do
    src+="$(find ${i}/ -type f -name "*.${file_ext}" | sed -e "s/^\.\///g" | awk '{print length,$0}')"
done

if [ $leave_main == false ]
then
    src=$(printf "$src" | sed "/main.${file_ext}/d")
fi

src=$(printf "$src" | sort -n -s -r)

obj_line=$(grep ${obj_rule} --line-number Makefile | cut -d: -f 1 | head -n 1)
src_line=$(grep ${src_rule} --line-number Makefile | cut -d: -f 1 | head -n 1)

if [[ "$obj_line" == "" ]]
then
    echo "Invalid makefile. Rule ${obj_rule} not found."
    exit 84;
fi

if [[ "$src_line" == "" ]]
then
    echo "Invalid makefile. Rule ${src_rule} not found."
    exit 84;
fi

if [[ $src_line -ge $obj_line ]]
then
    echo "Invalid makefile. Rule ${obj_rule} is not next to ${src_rule}."\
    "(OBJ is at line $obj_line and SRC is at line $src_line)";
    exit 84;
fi

makefile_without_src=$(sed "${src_line},$((obj_line - 1))d" Makefile)
longest_line=$(echo "${src}" | cut -d" " -f1 | head -n 1)
last_line=$(echo "${src}" | cut -d" " -f 2- | tail -n 1)

out=""

start_tabs_count=$(((3 + $tab_size) / $tab_size))
start_tabs=""
for i in $(seq 0 1 $start_tabs_count)
do
    start_tabs+="\t"
done

while read src; do
    out+="$start_tabs$(echo "${src}" | cut -d" " -f2-)";
    line_size=$(echo "${src}" | cut -d" " -f1)
    tabs_number=$(((($longest_line - ($line_size / $tab_size * $tab_size)) / $tab_size) + 1))
    for i in $(seq 1 1 $tabs_number)
    do
        out+="\t";
    done
    out="${out}\\\\\n"
done < <(echo "$src" | sed '$d')

makefile_lines=$(cat Makefile)

out+="$start_tabs$last_line"
out="${src_rule}\t=\t${out:$(($start_tabs_count * 2 + 2))}"
echo "$(echo "$makefile_lines" | sed -e "$src_line,\$d")" > Makefile
echo "" >> Makefile
echo -e "$out" >> Makefile
echo "" >> Makefile
echo "$(echo "$makefile_lines" | sed -e "1,$(($obj_line - 1))d")" >> Makefile

if [ "$out" == "${src_rule}\t=\t" ]
then
    echo "No files were added to Makefile. SRC rule cleared. Perhaps src is empty?"
else
    echo "$(echo -e $out | wc -l) file(s) found and added to Makefile."
fi